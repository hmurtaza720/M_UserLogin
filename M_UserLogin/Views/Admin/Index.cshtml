@model IEnumerable<M_UserLogin.Models.Users>

@{
    ViewData["Title"] = "Admin Dashboard";
}

<style>
    body {
        background: linear-gradient(135deg, #1e1e2f, #252540, #12121c);
        color: #ffffff !important;
        font-family: 'Segoe UI', sans-serif;
        min-height: 100vh;
    }

    .admin-dashboard {
        max-width: 1200px;
        margin: 40px auto;
        background: rgba(255, 255, 255, 0.08);
        border-radius: 16px;
        padding: 30px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
    }

    h2 {
        text-align: center;
        color: #ffca28;
        font-weight: 600;
    }

    .table {
        color: #fff !important;
        background-color: rgba(255, 255, 255, 0.1);
        border-color: #444;
    }

        .table th {
            background-color: #ffca28;
            color: #000;
        }

        .table td {
            color: #fff !important;
            background-color: rgba(255, 255, 255, 0.05);
        }

    .btn {
        border-radius: 8px;
        transition: 0.3s;
    }

    .btn-success {
        background-color: #28a745;
        border: none;
        color: white !important;
    }

        .btn-success:hover {
            background-color: #218838;
        }

    .btn-danger {
        background-color: #dc3545;
        border: none;
        color: white !important;
    }

        .btn-danger:hover {
            background-color: #c82333;
        }

    .alert-success {
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 8px;
    }

    .text-muted {
        color: #ddd !important;
    }

    input[type="text"], select, textarea {
        background-color: rgba(255, 255, 255, 0.1);
        color: #fff;
        border: 1px solid #ffca28;
        border-radius: 8px;
        padding: 6px 10px;
    }

        input[type="text"]:focus {
            outline: none;
            box-shadow: 0 0 6px #ffca28;
        }

    #userSearch {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid #ffca28;
        color: #fff;
        border-radius: 10px;
        padding: 10px 15px;
        width: 100%;
        margin-bottom: 20px;
        transition: 0.3s;
    }

        #userSearch:focus {
            outline: none;
            box-shadow: 0 0 8px #ffca28;
        }

    #exportBtn {
        background-color: #007bff;
        border: none;
        color: white;
        padding: 10px 20px;
        border-radius: 8px;
        font-weight: 600;
        transition: 0.3s;
        float: right;
    }

        #exportBtn:hover {
            background-color: #0069d9;
            transform: translateY(-2px);
        }
</style>


<div class="admin-dashboard">
    <h2 class="mb-3">⚙️ Admin Dashboard</h2>
    <p class="text-center text-muted">Manage users, roles, and permissions.</p>

    @if (TempData["Message"] != null)
    {
        <div class="alert alert-success text-center">
            @TempData["Message"]
        </div>
    }

    <div class="d-flex justify-content-between align-items-center mb-3">
        <input type="text" id="userSearch" placeholder="🔍 Search by name, email, or role..." style="width:70%;" />
        <button id="exportBtn">📤 Export to Excel (CSV)</button>
    </div>

    <table class="table table-bordered table-striped mt-4" id="userTable">
        <thead class="text-center">
            <tr>
                <th>Full Name</th>
                <th>Email</th>
                <th>Roles</th>
                <th>Assign Role</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody class="text-center">
            @foreach (var user in Model)
            {
                <tr>
                    <td>@user.FullName</td>
                    <td>@user.Email</td>
                    <td>
                        @{
                            var rolesForUser = (ViewBag.UserRoles as List<(M_UserLogin.Models.Users User, IList<string> Roles)>)
                            ?.FirstOrDefault(u => u.User.Id == user.Id)
                            .Roles;
                        }
                        @if (rolesForUser != null && rolesForUser.Any())
                        {
                            @string.Join(", ", rolesForUser)
                        }
                        else
                        {
                            <span class="text-muted">No roles assigned</span>
                        }
                    </td>
                    <td>
                        <form asp-action="AssignRole" method="post" class="d-flex justify-content-center mb-2">
                            <input type="hidden" name="userId" value="@user.Id" />
                            <input type="text" name="role" placeholder="Enter role..." class="form-control w-50 me-2" required />
                            <button type="submit" class="btn btn-sm btn-success">Assign</button>
                        </form>
                    </td>
                    <td>
                        <form asp-action="DeleteUser" method="post">
                            <input type="hidden" name="userId" value="@user.Id" />
                            <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>
    // 🔍 Search Filter
    document.getElementById('userSearch').addEventListener('keyup', function () {
        const query = this.value.toLowerCase();
        const rows = document.querySelectorAll('#userTable tbody tr');

        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            row.style.display = text.includes(query) ? '' : 'none';
        });
    });

    // 📤 Export Table to CSV
    document.getElementById('exportBtn').addEventListener('click', function () {
        const rows = document.querySelectorAll("#userTable tr");
        let csv = [];

        rows.forEach(row => {
            const cols = row.querySelectorAll("th, td");
            const rowData = Array.from(cols).map(col => `"${col.innerText.replace(/"/g, '""')}"`).join(",");
            csv.push(rowData);
        });

        const csvContent = "data:text/csv;charset=utf-8," + csv.join("\n");
        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", "EMS_UserData.csv");
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    });
</script>
